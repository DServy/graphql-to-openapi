{"version":3,"sources":["textAreaStyles.ts","SchemaTextArea.tsx","QueryTextArea.tsx","GraphQLToOpenApiDocs.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["textAreaStyles","fontFamily","fontSize","height","resize","width","SchemaTextArea","isValid","value","onChange","className","style","target","QueryTextArea","GraphQLToOpenApiDocs","savedSchemaString","localStorage","getItem","savedInputQuery","useState","schemaString","setSchemaString","inputQuery","setInputQuery","useEffect","setItem","graphqlToOpenApi","openApiSchema","schemaError","queryErrors","success","src","logo","alt","href","icon","Check","readOnly","JSON","stringify","disabled","placeholder","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.1fd58296.chunk.js","sourcesContent":["import { CSSProperties } from \"react\";\n\nexport const textAreaStyles: CSSProperties = {\n  fontFamily: 'Consolas, monospace, sans-serif',\n  fontSize: 11,\n  height: '100%',\n  resize: 'none',\n  width: '100%',\n};","import React from 'react';\nimport { textAreaStyles } from './textAreaStyles';\n\nexport const SchemaTextArea: React.FC<{\n  isValid: boolean;\n  value: string;\n  onChange: (value: string) => void;\n}> = ({\n  isValid,\n  value,\n  onChange\n}) => {\n  return (\n    <>\n      <textarea \n        className={\n          isValid ? \"form-control\" : \"form-control is-invalid\"\n        }\n        style={textAreaStyles}\n        value={value}\n        onChange={({ target: { value } }) => {\n          onChange(value);\n        }} />\n    </>\n  );\n}","import React from 'react';\nimport { textAreaStyles } from './textAreaStyles';\n\nexport const QueryTextArea: React.FC<{\n  isValid: boolean;\n  onChange: (value: string) => void;\n  value: string;\n}> = ({\n  isValid,\n  onChange,\n  value,\n}) => {\n\n  return (\n    <>\n      <textarea value={value}\n        className={\n          isValid ? \"form-control\" : \"form-control is-invalid\"\n        }\n        style={textAreaStyles}\n        onChange={({ target: { value } }) => {\n          onChange(value);\n        }} />\n    </>\n  );\n\n};","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport { SchemaTextArea } from './SchemaTextArea';\nimport { QueryTextArea } from './QueryTextArea';\nimport { graphqlToOpenApi } from 'graphql-to-openapi';\nimport Octicon, { Check } from '@primer/octicons-react';\nimport './GraphQLToOpenApiDocs.scss';\nimport { textAreaStyles } from './textAreaStyles';\n\nexport const GraphQLToOpenApiDocs: React.FC = () => {\n  const defaultSchema =\n`type Query {\n  query: Query\n\n  \"\"\"\n  An array of strings\n  \"\"\"\n  arrayOfStrings(\n    input: String!,\n    otherInput: String!\n  ): [String!]!\n}`;\n  const defaultQuery =\n`query scalarQuery (\n  $input: String!,\n  $otherInput: String!\n) {\n  arrayOfStrings(input: $input, otherInput: $otherInput)\n}`;\n\n  const savedSchemaString = localStorage.getItem('graphql-to-openapi:schemaString');\n  const savedInputQuery = localStorage.getItem('graphql-to-openapi:inputQuery');\n\n  const [ schemaString, setSchemaString ] = useState(savedSchemaString ?? defaultSchema);\n  const [ inputQuery, setInputQuery ] = useState(savedInputQuery ?? defaultQuery);\n\n  useEffect(() => {\n    localStorage.setItem('graphql-to-openapi:schemaString', schemaString);\n  }, [schemaString]);\n\n  useEffect(() => {\n    localStorage.setItem('graphql-to-openapi:inputQuery', inputQuery);\n  }, [inputQuery]);\n\n  const {\n    openApiSchema,\n    schemaError,\n    queryErrors,\n  } = graphqlToOpenApi({\n    schemaString,\n    inputQuery,\n  });\n  const success = !schemaError && !queryErrors;\n  return (\n    <div className=\"GraphQLToOpenApiDocs\">\n      <div className=\"container-fluid\">\n        <header className=\"GraphQLToOpenApiDocs-header\">\n          <img height={50} src={logo} className=\"GraphQLToOpenApiDocs-logo\" alt=\"logo\" />\n          <a className=\"float-right\"\n            href=\"https://npmjs.com/graphql-to-openapi\">\n            <img alt=\"npm link\" src=\"https://img.shields.io/npm/v/graphql-to-openapi.svg\"/>\n          </a>\n        </header>\n        <div className=\"row\">\n          <h5 className=\"col\">\n            Supply your GraphQL Schema below:\n          </h5>\n          <h5 className=\"col\">\n            Supply your GraphQL Query below:\n          </h5>\n        </div>\n        <div style={{ height: `calc(50vh - 100px)` }} className=\"row\">\n          <div className=\"col\">\n            <SchemaTextArea isValid={!schemaError}\n              onChange={setSchemaString}\n              value={schemaString} />\n          </div>\n          <div className=\"col\">\n            <QueryTextArea isValid={!queryErrors}\n              onChange={setInputQuery}\n              value={inputQuery}\n            />\n          </div>\n        </div>\n        <p>&nbsp;</p>\n        <div className=\"row\" style={{ height: `calc(50vh - 100px)`}}>\n          <div className=\"col\">\n            <h5>OpenAPI Schema:\n              <span className=\"float-right\">\n                { !success\n                  ? (\n                    <span className=\"float-right\">\n                      <span className=\"spinner-grow\"\n                        style={{ width: '1em', height: '1em' }}>\n                        <span className=\"sr-only\">Loading...</span>\n                      </span>\n                      {' '}\n                      Waiting for valid schema and query...\n                    </span>\n                  )\n                  : (<Octicon icon={Check} />)\n                }\n              </span>\n            </h5>\n            { openApiSchema\n              ? (<textarea\n                className=\"form-control\"\n                readOnly\n                style={textAreaStyles}\n                value={JSON.stringify(openApiSchema, null, 2)} />)\n              : <textarea readOnly disabled\n                style={textAreaStyles}\n                className=\"form-control\"\n                placeholder=\"Please supply a schema and query above\" />\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphQLToOpenApiDocs;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GraphQLToOpenApiDocs from './GraphQLToOpenApiDocs';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GraphQLToOpenApiDocs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.b8584f3c.svg\";"],"sourceRoot":""}